---
name: Python CI

# yamllint disable rule:line-length

# Run CI for pushes to main and pull requests.
"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Cache installed dependencies to speed up subsequent runs
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-lint-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: ${{ runner.os }}-lint-

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .

  doctest:
    name: Doctest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-doctest-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: ${{ runner.os }}-doctest-

      - name: Install project
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run README doctests
        run: python -m doctest README.md

  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Project requires Python >=3.10
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-test-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ matrix.python-version }}-
            ${{ runner.os }}-test-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pytest pytest-cov

      - name: Run unit tests with coverage
        run: |
          coverage run --rcfile=.coveragerc -m pytest
          coverage xml

      - name: Store coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

  pkcs11-tests:
    name: PKCS11 tests
    runs-on: ubuntu-latest
    needs: tests
    env:
      PKCS11_LIBRARY: /usr/lib/softhsm/libsofthsm2.so
      PKCS11_TOKEN_LABEL: TestToken
      PKCS11_PIN: 1234
      SOFTHSM2_CONF: ${{ github.workspace }}/softhsm2.conf
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-pkcs11-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pkcs11-

      - name: Install dependencies and SoftHSM
        run: |
          sudo apt-get update
          sudo apt-get install -y softhsm2
          python -m pip install --upgrade pip
          pip install -e .[dev,hsm]
          pip install pytest pytest-cov

      - name: Configure SoftHSM
        run: |
          mkdir -p "$(dirname "$SOFTHSM2_CONF")/tokens"
          cat <<EOF > "$SOFTHSM2_CONF"
          directories.tokendir = $(dirname "$SOFTHSM2_CONF")/tokens
          objectstore.backend = file
          EOF
          softhsm2-util --init-token --free --label "$PKCS11_TOKEN_LABEL" \
            --pin $PKCS11_PIN --so-pin 0000

      - name: Run PKCS11 tests with coverage
        run: |
          coverage run --rcfile=.coveragerc -m pytest tests/test_pkcs11_keystore.py
          coverage xml

      - name: Store PKCS11 coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-pkcs11
          path: coverage.xml

  coverage-report:
    name: Coverage report
    runs-on: ubuntu-latest
    needs: [tests, pkcs11-tests]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: coverage
      # Upload all collected coverage files to Codecov
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: "coverage/**/coverage.xml"
          fail_ci_if_error: true
