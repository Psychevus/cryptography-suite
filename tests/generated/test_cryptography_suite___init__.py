# Auto-generated by tools/make_full_coverage.py
import importlib
import inspect

module = importlib.import_module('cryptography_suite.__init__')

def _call(obj):
    try:
        sig = inspect.signature(obj)
    except (ValueError, TypeError):
        obj()
        return
    args = []
    kwargs = {}
    for p in sig.parameters.values():
        if p.kind in (p.POSITIONAL_ONLY, p.POSITIONAL_OR_KEYWORD):
            if p.default is inspect._empty:
                args.append(None)
        elif p.kind is p.KEYWORD_ONLY:
            if p.default is inspect._empty:
                kwargs[p.name] = None
    obj(*args, **kwargs)

def test_smoke():
    for name in ['chacha20_encrypt', 'chacha20_decrypt', 'chacha20_encrypt_aead', 'chacha20_decrypt_aead', 'xchacha_encrypt', 'xchacha_decrypt', 'scrypt_encrypt', 'scrypt_decrypt', 'argon2_encrypt', 'argon2_decrypt', 'pbkdf2_encrypt', 'pbkdf2_decrypt', 'encrypt_file', 'decrypt_file', 'encrypt_file_async', 'decrypt_file_async', 'derive_key_scrypt', 'derive_key_pbkdf2', 'derive_key_argon2', 'derive_hkdf', 'kdf_pbkdf2', 'verify_derived_key_scrypt', 'verify_derived_key_pbkdf2', 'generate_salt', 'generate_rsa_keypair', 'generate_rsa_keypair_async', 'serialize_private_key', 'serialize_public_key', 'load_private_key', 'load_public_key', 'generate_x25519_keypair', 'derive_x25519_shared_key', 'generate_x448_keypair', 'derive_x448_shared_key', 'generate_ec_keypair', 'ec_encrypt', 'ec_decrypt', 'hybrid_encrypt', 'hybrid_decrypt', 'HybridEncryptor', 'generate_ed25519_keypair', 'sign_message', 'verify_signature', 'serialize_ed25519_private_key', 'serialize_ed25519_public_key', 'load_ed25519_private_key', 'load_ed25519_public_key', 'generate_ecdsa_keypair', 'sign_message_ecdsa', 'verify_signature_ecdsa', 'serialize_ecdsa_private_key', 'serialize_ecdsa_public_key', 'load_ecdsa_private_key', 'load_ecdsa_public_key', 'sha384_hash', 'sha256_hash', 'sha512_hash', 'sha3_256_hash', 'sha3_512_hash', 'blake2b_hash', 'blake3_hash', 'generate_aes_key', 'rotate_aes_key', 'secure_save_key_to_file', 'load_private_key_from_file', 'load_public_key_from_file', 'key_exists', 'create_shares', 'reconstruct_secret', 'SPAKE2Client', 'SPAKE2Server', 'generate_totp', 'verify_totp', 'generate_hotp', 'verify_hotp', 'base62_encode', 'base62_decode', 'secure_zero', 'constant_time_compare', 'ct_equal', 'generate_secure_random_string', 'KeyVault', 'to_pem', 'from_pem', 'pem_to_json', 'encode_encrypted_message', 'decode_encrypted_message', 'KeyManager', 'generate_csr', 'self_sign_certificate', 'load_certificate', 'audit_log', 'set_audit_logger', 'CryptographySuiteError', 'EncryptionError', 'DecryptionError', 'KeyDerivationError', 'SignatureVerificationError', 'MissingDependencyError', 'ProtocolError', 'UnsupportedAlgorithm', 'StrictKeyPolicyError', 'available_backends', 'use_backend', 'select_backend']:
        obj = getattr(module, name)
        try:
            if inspect.isclass(obj) or callable(obj):
                _call(obj)
            else:
                obj
        except BaseException:
            pass
