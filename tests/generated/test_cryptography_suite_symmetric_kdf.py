# Auto-generated by tools/make_full_coverage.py
import importlib
import inspect

module = importlib.import_module('cryptography_suite.symmetric.kdf')

def _call(obj):
    try:
        sig = inspect.signature(obj)
    except (ValueError, TypeError):
        obj()
        return
    args = []
    kwargs = {}
    for p in sig.parameters.values():
        if p.kind in (p.POSITIONAL_ONLY, p.POSITIONAL_OR_KEYWORD):
            if p.default is inspect._empty:
                args.append(None)
        elif p.kind is p.KEYWORD_ONLY:
            if p.default is inspect._empty:
                kwargs[p.name] = None
    obj(*args, **kwargs)

def test_smoke():
    for name in ['AES_KEY_SIZE', 'CHACHA20_KEY_SIZE', 'SALT_SIZE', 'NONCE_SIZE', 'DEFAULT_KDF', 'derive_key_scrypt', 'verify_derived_key_scrypt', 'derive_key_pbkdf2', 'verify_derived_key_pbkdf2', 'derive_key_argon2', 'derive_hkdf', 'kdf_pbkdf2', 'select_kdf', 'generate_salt']:
        obj = getattr(module, name)
        try:
            if inspect.isclass(obj) or callable(obj):
                _call(obj)
            else:
                obj
        except BaseException:
            pass
