# Auto-generated by tools/make_full_coverage.py
import importlib
import inspect

module = importlib.import_module('cryptography_suite.utils')

def _call(obj):
    try:
        sig = inspect.signature(obj)
    except (ValueError, TypeError):
        obj()
        return
    args = []
    kwargs = {}
    for p in sig.parameters.values():
        if p.kind in (p.POSITIONAL_ONLY, p.POSITIONAL_OR_KEYWORD):
            if p.default is inspect._empty:
                args.append(None)
        elif p.kind is p.KEYWORD_ONLY:
            if p.default is inspect._empty:
                kwargs[p.name] = None
    obj(*args, **kwargs)

def test_smoke():
    for name in ['base62_encode', 'base62_decode', 'secure_zero', 'constant_time_compare', 'deprecated', 'generate_secure_random_string', 'KeyVault', 'to_pem', 'from_pem', 'is_encrypted_pem', 'pem_to_json', 'encode_encrypted_message', 'decode_encrypted_message']:
        obj = getattr(module, name)
        try:
            if inspect.isclass(obj) or callable(obj):
                _call(obj)
            else:
                obj
        except BaseException:
            pass
