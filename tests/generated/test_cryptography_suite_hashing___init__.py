# Auto-generated by tools/make_full_coverage.py
import importlib
import inspect

module = importlib.import_module('cryptography_suite.hashing.__init__')

def _call(obj):
    try:
        sig = inspect.signature(obj)
    except (ValueError, TypeError):
        obj()
        return
    args = []
    kwargs = {}
    for p in sig.parameters.values():
        if p.kind in (p.POSITIONAL_ONLY, p.POSITIONAL_OR_KEYWORD):
            if p.default is inspect._empty:
                args.append(None)
        elif p.kind is p.KEYWORD_ONLY:
            if p.default is inspect._empty:
                kwargs[p.name] = None
    obj(*args, **kwargs)

def test_smoke():
    for name in ['sha256_hash', 'sha384_hash', 'sha512_hash', 'sha3_256_hash', 'sha3_512_hash', 'blake2b_hash', 'blake3_hash', 'blake3_hash_v2']:
        obj = getattr(module, name)
        try:
            if inspect.isclass(obj) or callable(obj):
                _call(obj)
            else:
                obj
        except BaseException:
            pass
